/* tslint:disable */
/* eslint-disable */
import { GraphQLResolveInfo } from 'graphql';
/**
 * This file is auto-generated by graphql-schema-typescript
 * Please note that any changes in this file may be overwritten
 */
 

export { };

declare global {
  /*******************************
   *                             *
   *          TYPE DEFS          *
   *                             *
   *******************************/
  export interface GQLQuery {
    bills?: Array<GQLBill | null>;
    checkIns?: Array<GQLCheckIn | null>;
    customers?: Array<GQLCustomer | null>;
    rooms?: Array<GQLRoom | null>;
    users?: Array<GQLUser | null>;
  }
  
  /**
   * Add bills object types
   */
  export interface GQLBill {
    billLog?: string;
    billPaid?: string;
  }
  
  export interface GQLCheckIn {
    inTime?: string;
    outTime?: string;
    state?: string;
  }
  
  export interface GQLCustomer {
    name?: string;
    age?: number;
    address?: string;
  }
  
  export interface GQLRoom {
    displayName?: string;
  }
  
  export interface GQLUser {
    id: string;
    name?: string;
    role?: string;
    email?: string;
  }
  
  export interface GQLMutation {
    signup?: GQLuserAuthToken;
    login?: GQLuserAuthToken;
  }
  
  export interface GQLuserAuthToken {
    user?: GQLUser;
    authToken?: string;
  }
  
  /*********************************
   *                               *
   *         TYPE RESOLVERS        *
   *                               *
   *********************************/
  /**
   * This interface define the shape of your resolver
   * Note that this type is designed to be compatible with graphql-tools resolvers
   * However, you can still use other generated interfaces to make your resolver type-safed
   */
  export interface GQLResolver {
    Query?: GQLQueryTypeResolver;
    Bill?: GQLBillTypeResolver;
    CheckIn?: GQLCheckInTypeResolver;
    Customer?: GQLCustomerTypeResolver;
    Room?: GQLRoomTypeResolver;
    User?: GQLUserTypeResolver;
    Mutation?: GQLMutationTypeResolver;
    userAuthToken?: GQLuserAuthTokenTypeResolver;
  }
  export interface GQLQueryTypeResolver<TParent = any> {
    bills?: QueryToBillsResolver<TParent>;
    checkIns?: QueryToCheckInsResolver<TParent>;
    customers?: QueryToCustomersResolver<TParent>;
    rooms?: QueryToRoomsResolver<TParent>;
    users?: QueryToUsersResolver<TParent>;
  }
  
  export interface QueryToBillsResolver<TParent = any, TResult = Array<GQLBill | null> | null> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryToCheckInsResolver<TParent = any, TResult = Array<GQLCheckIn | null> | null> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryToCustomersResolver<TParent = any, TResult = Array<GQLCustomer | null> | null> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryToRoomsResolver<TParent = any, TResult = Array<GQLRoom | null> | null> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryToUsersResolver<TParent = any, TResult = Array<GQLUser | null> | null> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface GQLBillTypeResolver<TParent = any> {
    billLog?: BillToBillLogResolver<TParent>;
    billPaid?: BillToBillPaidResolver<TParent>;
  }
  
  export interface BillToBillLogResolver<TParent = any, TResult = string | null> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface BillToBillPaidResolver<TParent = any, TResult = string | null> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface GQLCheckInTypeResolver<TParent = any> {
    inTime?: CheckInToInTimeResolver<TParent>;
    outTime?: CheckInToOutTimeResolver<TParent>;
    state?: CheckInToStateResolver<TParent>;
  }
  
  export interface CheckInToInTimeResolver<TParent = any, TResult = string | null> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckInToOutTimeResolver<TParent = any, TResult = string | null> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckInToStateResolver<TParent = any, TResult = string | null> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface GQLCustomerTypeResolver<TParent = any> {
    name?: CustomerToNameResolver<TParent>;
    age?: CustomerToAgeResolver<TParent>;
    address?: CustomerToAddressResolver<TParent>;
  }
  
  export interface CustomerToNameResolver<TParent = any, TResult = string | null> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerToAgeResolver<TParent = any, TResult = number | null> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerToAddressResolver<TParent = any, TResult = string | null> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface GQLRoomTypeResolver<TParent = any> {
    displayName?: RoomToDisplayNameResolver<TParent>;
  }
  
  export interface RoomToDisplayNameResolver<TParent = any, TResult = string | null> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface GQLUserTypeResolver<TParent = any> {
    id?: UserToIdResolver<TParent>;
    name?: UserToNameResolver<TParent>;
    role?: UserToRoleResolver<TParent>;
    email?: UserToEmailResolver<TParent>;
  }
  
  export interface UserToIdResolver<TParent = any, TResult = string> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UserToNameResolver<TParent = any, TResult = string | null> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UserToRoleResolver<TParent = any, TResult = string | null> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UserToEmailResolver<TParent = any, TResult = string | null> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface GQLMutationTypeResolver<TParent = any> {
    signup?: MutationToSignupResolver<TParent>;
    login?: MutationToLoginResolver<TParent>;
  }
  
  export interface MutationToSignupArgs {
    name?: string;
    email?: string;
    password?: string;
    role?: string;
  }
  export interface MutationToSignupResolver<TParent = any, TResult = GQLuserAuthToken | null> {
    (parent: TParent, args: MutationToSignupArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToLoginArgs {
    email?: string;
    password?: string;
  }
  export interface MutationToLoginResolver<TParent = any, TResult = GQLuserAuthToken | null> {
    (parent: TParent, args: MutationToLoginArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface GQLuserAuthTokenTypeResolver<TParent = any> {
    user?: userAuthTokenToUserResolver<TParent>;
    authToken?: userAuthTokenToAuthTokenResolver<TParent>;
  }
  
  export interface userAuthTokenToUserResolver<TParent = any, TResult = GQLUser | null> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface userAuthTokenToAuthTokenResolver<TParent = any, TResult = string | null> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
}